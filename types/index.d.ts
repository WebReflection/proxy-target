export const ARRAY: "array";
export const BIGINT: "bigint";
export const BOOLEAN: "boolean";
export const FUNCTION: "function";
export const NULL: "null";
export const NUMBER: "number";
export const OBJECT: "object";
export const STRING: "string";
export const SYMBOL: "symbol";
export const UNDEFINED: "undefined";
export function pair<T, V>(type: T, value: V): Pair<T, V>;
export function unwrap<P>(wrap: P, revive?: <V>(type: Type, value: V) => V): P extends Pair<Type, V> ? V : P;
export function wrap<V>(value: V, resolve?: <Value>(type: Type, value: Value) => Value extends any[] ? Value : Value extends Function ? Value : Pair<Type, Value>): V extends any[] ? V : V extends Function ? V : Pair<V extends bigint ? "bigint" : V extends boolean ? "boolean" : V extends null ? "null" : V extends number ? "number" : V extends string ? "string" : V extends symbol ? "symbol" : V extends undefined ? "undefined" : "object", V>;
export function bound<V>(value: V): Bound<V>;
export function unbound<V>(value: V): V extends Function ? V : V;
export type Bound<V> = () => V;
export type Pair<T, V> = {
    type: T;
    value: V;
};
export type Type = "array" | "bigint" | "boolean" | "function" | "null" | "number" | "object" | "string" | "symbol" | "undefined";
